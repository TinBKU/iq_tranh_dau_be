generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model matches {
  id                              Int             @id @default(autoincrement())
  player1_id                      Int
  player2_id                      Int
  result                          matches_result?
  questions                       String          @db.LongText
  player1_answers                 String?         @db.LongText
  player2_answers                 String?         @db.LongText
  elo_change                      String?         @db.LongText
  exp_gain                        String?         @db.LongText
  created_at                      DateTime?       @default(now()) @db.DateTime(0)
  ended_at                        DateTime?       @db.DateTime(0)
  users_matches_player1_idTousers users           @relation("matches_player1_idTousers", fields: [player1_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "matches_ibfk_1")
  users_matches_player2_idTousers users           @relation("matches_player2_idTousers", fields: [player2_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "matches_ibfk_2")
  rooms                           rooms[]

  @@index([player1_id], map: "player1_id")
  @@index([player2_id], map: "player2_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model questions {
  id       Int     @id @default(autoincrement())
  content  String  @db.Text
  options  String  @db.LongText
  answer   String  @db.VarChar(255)
  category String? @db.VarChar(100)
}

model rooms {
  id                                 Int           @id @default(autoincrement())
  host_player_id                     Int
  guest_player_id                    Int?
  status                             rooms_status? @default(waiting)
  match_id                           Int?
  created_at                         DateTime?     @default(now()) @db.DateTime(0)
  updated_at                         DateTime?     @default(now()) @db.DateTime(0)
  users_rooms_host_player_idTousers  users         @relation("rooms_host_player_idTousers", fields: [host_player_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rooms_ibfk_1")
  users_rooms_guest_player_idTousers users?        @relation("rooms_guest_player_idTousers", fields: [guest_player_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rooms_ibfk_2")
  matches                            matches?      @relation(fields: [match_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rooms_ibfk_3")

  @@index([guest_player_id], map: "guest_player_id")
  @@index([host_player_id], map: "host_player_id")
  @@index([match_id], map: "match_id")
}

model users {
  id                                 Int       @id @default(autoincrement())
  name                               String    @db.VarChar(255)
  email                              String    @unique(map: "IDX_97672ac88f789774dd47f7c8be") @db.VarChar(255)
  elo                                Int       @default(1200)
  exp                                Int       @default(0)
  wins                               Int       @default(0)
  losses                             Int       @default(0)
  googleId                           String    @unique(map: "IDX_f382af58ab36057334fb262efd") @db.VarChar(255)
  avatarUrl                          String?   @db.VarChar(255)
  totalMatches                       Int       @default(0)
  createdAt                          DateTime  @default(now()) @db.DateTime(6)
  matches_matches_player1_idTousers  matches[] @relation("matches_player1_idTousers")
  matches_matches_player2_idTousers  matches[] @relation("matches_player2_idTousers")
  rooms_rooms_host_player_idTousers  rooms[]   @relation("rooms_host_player_idTousers")
  rooms_rooms_guest_player_idTousers rooms[]   @relation("rooms_guest_player_idTousers")
}

enum matches_result {
  player1
  player2
  draw
}

enum rooms_status {
  waiting
  playing
  finished
}
