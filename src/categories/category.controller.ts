// src/categories/category.controller.ts
import {
  Controller,
  Post,
  Get,
  Body,
  Param,
  Put,
  Delete,
  UseGuards,
} from '@nestjs/common';
import { CategoryService } from './category.service';
import {
  ApiBearerAuth,
  ApiBody,
  ApiOperation,
  ApiResponse,
  ApiTags,
} from '@nestjs/swagger';
import { CreateCategoryDto } from 'src/common/dto/create-category.dto';
import { UpdateCategoryDto } from 'src/common/dto/update-category.dto';
import { JwtAuthGuard } from 'src/common/guards/jwt-auth.guard';

@ApiBearerAuth('jwt-auth')
@UseGuards(JwtAuthGuard)
@ApiTags('Categories')
@Controller('categories')
export class CategoryController {
  constructor(private readonly categoryService: CategoryService) {}
  @Get()
  @ApiOperation({ summary: 'üìÑ L·∫•y t·∫•t c·∫£ danh m·ª•c' })
  @ApiResponse({ status: 200, description: 'Danh s√°ch t·∫•t c·∫£ danh m·ª•c' })
  getfindAll() {
    return this.categoryService.findAll();
  }

  @Post()
  @ApiOperation({ summary: 'T·∫°o danh m·ª•c m·ªõi' })
  @ApiBody({
    description: 'T√™n danh m·ª•c c·∫ßn t·∫°o',
    schema: {
      type: 'object',
      properties: {
        name: { type: 'string', example: 'L·ªãch s·ª≠' },
      },
      required: ['name'],
    },
    examples: {
      default: {
        summary: 'V√≠ d·ª• t·∫°o danh m·ª•c "Khoa h·ªçc"',
        value: { name: 'Khoa h·ªçc' },
      },
    },
  })
  @ApiResponse({ status: 201, description: 'Danh m·ª•c ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng' })
  create(@Body() body: CreateCategoryDto) {
    return this.categoryService.create(body.name);
  }

  @Put(':id')
  @ApiOperation({ summary: 'C·∫≠p nh·∫≠t danh m·ª•c theo ID' })
  @ApiBody({
    description: 'T√™n danh m·ª•c m·ªõi c·∫ßn c·∫≠p nh·∫≠t',
    schema: {
      type: 'object',
      properties: {
        name: { type: 'string', example: 'To√°n h·ªçc n√¢ng cao' },
      },
      required: ['name'],
    },
    examples: {
      example1: {
        summary: 'C·∫≠p nh·∫≠t th√†nh "To√°n h·ªçc n√¢ng cao"',
        value: { name: 'To√°n h·ªçc n√¢ng cao' },
      },
    },
  })
  @ApiResponse({ status: 200, description: 'C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng' })
  update(@Param('id') id: number, @Body() body: UpdateCategoryDto) {
    return this.categoryService.update(id, body.name);
  }

  @Delete(':id')
  @ApiOperation({ summary: 'üóëÔ∏è X√≥a danh m·ª•c theo ID' })
  @ApiResponse({ status: 200, description: 'Xo√° danh m·ª•c th√†nh c√¥ng' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y danh m·ª•c' })
  delete(@Param('id') id: number) {
    return this.categoryService.delete(id);
  }

  @Get()
  findAll() {
    return this.categoryService.findAll();
  }
}
