import { Controller, Get, Post, Body, Param, UseGuards } from '@nestjs/common';
import { MatchAnswerService } from './match-answer.service';
import { MatchAnswer } from 'src/match-answers/match-answer.entity';
import {
  ApiTags,
  ApiOperation,
  ApiBody,
  ApiParam,
  ApiResponse,
  ApiBearerAuth,
} from '@nestjs/swagger';
import { CreateMatchAnswerDto } from 'src/common/dto/create-match-answer.dto';
import { JwtAuthGuard } from 'src/common/guards/jwt-auth.guard';

@ApiTags('match-answers')
@ApiBearerAuth('jwt-auth')
@UseGuards(JwtAuthGuard)
@Controller('match-answers')
export class MatchAnswerController {
  constructor(private readonly matchAnswerService: MatchAnswerService) {}

  @Post()
  @ApiOperation({ summary: 'üì• L∆∞u ƒë√°p √°n c·ªßa ng∆∞·ªùi ch∆°i' })
  @ApiBody({
    type: CreateMatchAnswerDto, // ‚úÖ B·∫ÆT BU·ªòC: ƒë·ªÉ Swagger hi·ªÉu ƒë√¢y l√† DTO class
    description: 'Th√¥ng tin ƒë√°p √°n c·∫ßn l∆∞u',
    examples: {
      example1: {
        summary: 'V√≠ d·ª• ƒë√°p √°n ƒë√∫ng',
        value: {
          matchId: 1,
          userId: 1,
          questionId: 5,
          selectedOption: 'C',
          isCorrect: true,
        },
      },
      example2: {
        summary: 'V√≠ d·ª• ƒë√°p √°n sai',
        value: {
          matchId: 1,
          userId: 1,
          questionId: 6,
          selectedOption: 'A',
          isCorrect: false,
        },
      },
    },
  })
  @ApiResponse({ status: 201, description: 'ƒê√°p √°n ƒë√£ ƒë∆∞·ª£c l∆∞u' })
  create(@Body() body: CreateMatchAnswerDto) {
    return this.matchAnswerService.create(body);
  }

  @Get('match/:matchId')
  @ApiOperation({ summary: 'üìÑ L·∫•y t·∫•t c·∫£ ƒë√°p √°n trong m·ªôt tr·∫≠n ƒë·∫•u' })
  @ApiParam({
    name: 'matchId',
    type: Number,
    example: 1,
    description: 'ID c·ªßa tr·∫≠n ƒë·∫•u',
  })
  @ApiResponse({ status: 200, description: 'Danh s√°ch ƒë√°p √°n trong tr·∫≠n ƒë·∫•u' })
  findByMatch(@Param('matchId') matchId: number) {
    return this.matchAnswerService.findByMatch(matchId);
  }

  @Get('match/:matchId/user/:userId')
  @ApiOperation({ summary: 'üìÑ L·∫•y ƒë√°p √°n c·ªßa ng∆∞·ªùi ch∆°i trong m·ªôt tr·∫≠n' })
  @ApiParam({
    name: 'matchId',
    type: Number,
    example: 1,
    description: 'ID tr·∫≠n ƒë·∫•u',
  })
  @ApiParam({
    name: 'userId',
    type: Number,
    example: 10,
    description: 'ID ng∆∞·ªùi ch∆°i',
  })
  @ApiResponse({ status: 200, description: 'Danh s√°ch ƒë√°p √°n c·ªßa ng∆∞·ªùi ch∆°i' })
  findByUserInMatch(
    @Param('matchId') matchId: number,
    @Param('userId') userId: number,
  ) {
    return this.matchAnswerService.findByUserInMatch(matchId, userId);
  }
}
